ESP32 BLE SERVER CODE Breakdown - Ravi

// These libraries are developed by Neil Kolban for ESP32 to be used in Arduino IDE

// Include these to create a server, utilize the BLE function
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>
#include <BLE2902.h> // Helps control "Notify" on/off using the nrfConnect app.

byte flags = 0b00111110;
byte bpm;
byte heart[8] = { 0b00001110, 60, 0, 0, 0 , 0, 0, 0}; 
// Array of data sent to the receiving client
//Defined by the Bluetooth organization that these 8 bytes are for heart rate characteristics

byte hrmPos[1] = {2};

bool _BLEClientConnected = false; //Default value

#define heartRateService BLEUUID((uint16_t)0x180D) // A shorter way to define the heart rate service 

//Once the service is defined, we define the characteristics it is going to display
//"0x2A37" comes from Bluetooth org chart.

BLECharacteristic heartRateMeasurementCharacteristics(BLEUUID((uint16_t)0x2A37), BLECharacteristic::PROPERTY_NOTIFY);

BLECharacteristic sensorPositionCharacteristic(BLEUUID((uint16_t)0x2A38), BLECharacteristic::PROPERTY_READ);
BLEDescriptor heartRateDescriptor(BLEUUID((uint16_t)0x2901));
BLEDescriptor sensorPositionDescriptor(BLEUUID((uint16_t)0x2901));

//Connected-Disconnected status change function
class MyServerCallbacks : public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
      _BLEClientConnected = true;
    };

    void onDisconnect(BLEServer* pServer) {
      _BLEClientConnected = false;
    }
};


void InitBLE() {
  BLEDevice::init("FT7"); // Decide device name, here "FT7"
  // Create the BLE Server
  BLEServer *pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  // Create the BLE Service
  BLEService *pHeart = pServer->createService(heartRateService);

  pHeart->addCharacteristic(&heartRateMeasurementCharacteristics);
  heartRateDescriptor.setValue("Rate from 0 to 200");
  heartRateMeasurementCharacteristics.addDescriptor(&heartRateDescriptor);
  heartRateMeasurementCharacteristics.addDescriptor(new BLE2902()); 
//BLE2902 allows us to stop receiving data from the BLE device thus conserving energy. Basically prevents constant "notify"

  pHeart->addCharacteristic(&sensorPositionCharacteristic);
  sensorPositionDescriptor.setValue("Position 0 - 6"); // User defined value to be displayed

  sensorPositionCharacteristic.addDescriptor(&sensorPositionDescriptor); //these characteristics are defined earlier

  pServer->getAdvertising()->addServiceUUID(heartRateService);

  pHeart->start();
  // Start advertising
  pServer->getAdvertising()->start();
}


//Everything above is used to decide the BLE device name, what all to display to the phone

void setup() {
  Serial.begin(115200);
  Serial.println("Start");
  InitBLE();
  bpm = 1;
}


void loop() {
  // put your main code here, to run repeatedly:

  heart[1] = (byte)bpm;
  int energyUsed = 3000;
  heart[3] = energyUsed / 256;
  heart[2] = energyUsed - (heart[2] * 256);
  Serial.println(bpm);

 // setting the value and giving the length of the array it seems
//Put the values here that you want to broadcast to the phone

  heartRateMeasurementCharacteristics.setValue(heart, 8);
  heartRateMeasurementCharacteristics.notify();

  sensorPositionCharacteristic.setValue(hrmPos, 1);
  bpm++;

  delay(2000);
}


// Copyright <2017> <Andreas Spiess> 
// Free to use
